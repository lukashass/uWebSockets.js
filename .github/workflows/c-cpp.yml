name: Build

on:
  push:
    branches: [master, arm]

jobs:
  # build-windows:
  #   runs-on: windows-latest
  #   steps:
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - uses: ilammy/setup-nasm@v1.2.1
  #     - name: Update binaries
  #       run: |
  #         $ErrorActionPreference = 'SilentlyContinue'
  #         git clone --recursive https://github.com/uNetworking/uWebSockets.js.git
  #         cd uWebSockets.js
  #         nmake
  #         git fetch origin binaries:binaries
  #         git checkout binaries
  #         xcopy /Y dist\*.node .
  #         git status
  #         git config --global user.email "alexhultman@gmail.com"
  #         git config --global user.name "Alex Hultman"
  #         git commit -a -m "[GitHub Actions] Updated windows-latest binaries"
  #         git push "https://alexhultman:${{ secrets.SECRET }}@github.com/uNetworking/uWebSockets.js" binaries

  # build-unix:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-11.0, ubuntu-latest]
  #   steps:
  #     - name: Update binaries
  #       run: |
  #         sudo xcode-select -switch /Applications/Xcode_12.2.app || true
  #         sudo apt update || true
  #         sudo apt install -y g++-aarch64-linux-gnu || true
  #         git clone --recursive https://github.com/uNetworking/uWebSockets.js.git
  #         cd uWebSockets.js
  #         make
  #         git fetch origin binaries:binaries
  #         git checkout binaries
  #         cp dist/*.node .
  #         git status
  #         git rev-parse master > source_commit
  #         git checkout master docs/index.d.ts && mv docs/index.d.ts .
  #         git config --global user.email "alexhultman@gmail.com"
  #         git config --global user.name "Alex Hultman"
  #         git commit -a -m "[GitHub Actions] Updated ${{ matrix.os }} binaries" || true
  #         git push "https://alexhultman:${{ secrets.SECRET }}@github.com/uNetworking/uWebSockets.js" binaries

  aarch64_job:
    # The host should always be Linux
    runs-on: ubuntu-latest
    name: Build on ubuntu20.04 aarch64
    steps:
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu20.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}
          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y git make g++-aarch64-linux-gnu

          # Set an output parameter `uname` for use in subsequent steps
          run: |
            uname -a
            echo ::set-output name=uname::$(uname -a)
            git clone --recursive https://github.com/uNetworking/uWebSockets.js.git
            cd uWebSockets.js
            make
            git fetch origin binaries:binaries
            git checkout binaries
            cp dist/*.node .
            git status
            git rev-parse master > source_commit
            git checkout master docs/index.d.ts && mv docs/index.d.ts .
            git config --global user.email "alexhultman@gmail.com"
            git config --global user.name "Alex Hultman"
            git commit -a -m "[GitHub Actions] Updated ${{ matrix.os }} binaries" || true
            git push "https://alexhultman:${{ secrets.SECRET }}@github.com/uNetworking/uWebSockets.js" binaries

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
